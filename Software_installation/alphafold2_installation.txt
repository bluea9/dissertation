AlphaFold2 installation in Ubuntu 
Instructions for bash shell

Following instructions from https://github.com/google-deepmind/alphafold/blob/main/README.md

1. Install Docker and NVIDIA Toolkit.
    Install Docker.
    Install NVIDIA Container Toolkit for GPU support.
    Setup running Docker as a non-root user.
    Note: AlphaFold2 runs using CUDA 11.8, newer versions cause errors.

2. Since installation and download of the databases will take long, start a screen to continue the job.
Also create a directory for AlphaFold2 to keep things organized.
Note: Do not start conda since it can cause conflicts with Docker.

screen -S set_alphafold
mkdir <ALPHAFOLD2_DIR>
cd <ALPHAFOLD2_DIR>

3. Clone git repository and cd to it
First, verify that git is installed.
git clone https://github.com/deepmind/alphafold.git
cd ./alphafold

4. Install aria2 (aria2 is a utility for downloading files)
sudo apt install aria2

5. Download databases.
Note: Replace <DOWNLOAD_DIR> for the path to the directory to store the databases. 
It should not be a subdirectory in the AlphaFold repository directory.
Verify there is enough space to download the databases.

For full database use:
scripts/download_all_data.sh <DOWNLOAD_DIR> > download.log 2> download_all.log &
Note: Download size is 556GB (unzipped 2.62TB).

For reduced database use:
scripts/download_all_data.sh <DOWNLOAD_DIR> reduced_dbs
Note: Download size is ~294GB (unzipped ~815GB).

To prevent issues when running AlphaFold2 change directory access permissions
chmod 755 --recursive <DOWNLOAD_DIR> #otherwise files will not be readable

Verify number of files and disk usage
cd ../<DOWNLOAD_DIR>
du -hs *
cd ../alphafold

6. Verify Docker installation
Note: The AlphaFold2 site provides this line of code. I couldn't run it. 
I think it's for older docker and nvidia installations.
docker run --rm --gpus all nvidia/cuda:11.0-base nvidia-smi

Instead use this:
docker run --rm --runtime=nvidia --gpus all ubuntu nvidia-smi

7. Build the docker image
Note: You have to be in the alphafold directory.

Modify docker/Dockerfile, otherwise  AlphaFold v2.3 will not work on NVIDIA GeForce RTX 4090:

# Copyright 2021 DeepMind Technologies Limited
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ARG CUDA=12.2.2
FROM nvidia/cuda:${CUDA}-cudnn8-runtime-ubuntu22.04
# FROM directive resets ARGS, so we specify again (the value is retained if
# previously set).
ARG CUDA

# Use bash to support string substitution.
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

RUN apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install --no-install-recommends -y \
        build-essential \
        cmake \
        cuda-command-line-tools-$(cut -f1,2 -d- <<< ${CUDA//./-}) \
        git \
        hmmer \
        kalign \
        tzdata \
        wget \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get autoremove -y \
    && apt-get clean

# Compile HHsuite from source.
RUN git clone --branch v3.3.0 https://github.com/soedinglab/hh-suite.git /tmp/hh-suite \
    && mkdir /tmp/hh-suite/build \
    && pushd /tmp/hh-suite/build \
    && cmake -DCMAKE_INSTALL_PREFIX=/opt/hhsuite .. \
    && make -j 4 && make install \
    && ln -s /opt/hhsuite/bin/* /usr/bin \
    && popd \
    && rm -rf /tmp/hh-suite

# Install Miniconda package manager.
RUN wget -q -P /tmp \
  https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && bash /tmp/Miniconda3-latest-Linux-x86_64.sh -b -p /opt/conda \
    && rm /tmp/Miniconda3-latest-Linux-x86_64.sh

# Install conda packages.
ENV PATH="/opt/conda/bin:$PATH"
ENV LD_LIBRARY_PATH="/opt/conda/lib:$LD_LIBRARY_PATH"
RUN conda install -qy conda==24.1.2 pip python=3.11 \
    && conda install -y -c nvidia cuda=12.2.2 cuda-tools=12.2.2 cuda-toolkit=12.2.2 cuda-version=12.2 cuda-command-line-tools=12.2.2 cuda-compiler=12.2.2 cuda-runtime=12.2.2 \
    && conda install -y -c conda-forge openmm=8.0.0 pdbfixer \
    && conda clean --all --force-pkgs-dirs --yes

COPY . /app/alphafold
RUN wget -q -P /app/alphafold/alphafold/common/ \
  https://git.scicore.unibas.ch/schwede/openstructure/-/raw/7102c63615b64735c4941278d92b554ec94415f8/modules/mol/alg/src/stereo_chemical_props.txt

# Install pip packages.
RUN pip3 install --upgrade pip --no-cache-dir \
    && pip3 install -r /app/alphafold/requirements.txt --no-cache-dir \
    && pip3 install --upgrade --no-cache-dir \
      jax==0.4.26 \
      jaxlib==0.4.26+cuda12.cudnn89 \
      -f https://storage.googleapis.com/jax-releases/jax_cuda_releases.html

# Add SETUID bit to the ldconfig binary so that non-root users can run it.
RUN chmod u+s /sbin/ldconfig.real

# Currently needed to avoid undefined_symbol error.
RUN ln -sf /usr/lib/x86_64-linux-gnu/libffi.so.7 /opt/conda/lib/libffi.so.7

# We need to run `ldconfig` first to ensure GPUs are visible, due to some quirk
# with Debian. See https://github.com/NVIDIA/nvidia-docker/issues/1399 for
# details.
# ENTRYPOINT does not support easily running multiple commands, so instead we
# write a shell script to wrap them up.
WORKDIR /app/alphafold
RUN echo $'#!/bin/bash\n\
ldconfig\n\
python /app/alphafold/run_alphafold.py "$@"' > /app/run_alphafold.sh \
  && chmod +x /app/run_alphafold.sh
ENTRYPOINT ["/app/run_alphafold.sh"]

Once modified:
docker build -f docker/Dockerfile -t alphafold .

8. Install the run_docker.py dependencies.
Note: Create a Python Virtual Environment to prevent conflicts with your system's Python environment.
https://docs.python.org/3/tutorial/venv.html

Create directory for virtual environment (hidden)
mkdir ~/<ALPHAFOLD2_DIR>/.venv
Create vitual environment (here named af_venv)
python3 -m venv ~/<ALPHAFOLD2_DIR>/.venv/af_venv
Activate virtual environment
source ~/<ALPHAFOLD2_DIR>/.venv/af_venv/bin/activate

Install the dependencies
pip3 install -r docker/requirements.txt
pip3 install --force-reinstall 'requests<2.29.0' 'urllib3<2.0'
pip install setuptools
